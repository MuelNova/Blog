nova 在博客中介绍了他在攻防世界新手区的挑战——Pwn 题目 "String" 的解题过程。这是他通过几天学习后的一个重要成果。

首先，nova 对题目进行了基础分析，指出程序是 64 位且没有启用 PIE。通过对 `main` 函数的分析，发现程序在内存中申请了 8 字节并输出了相关地址。在深入分析函数 `sub_400D72()` 后，nova 发现该函数虽然允许输入名字，但有严格的长度限制，无法通过简单的缓冲区溢出来攻击。

接着，nova 检查了 `sub_400A7D()` 函数，发现用户需要通过特定输入选择路径。在 `sub_400BB9()` 中，他找到了一些线索，猜测需要在内存地址 `v4` 上做文章。接下来的 `sub_400CA6()` 函数分析则表明，只要能让 `*v4 = v4[1]` 成立，就可以执行任意 shellcode。

结合理论知识，nova 利用格式化字符串漏洞找到了内存中 `v4` 的位置，并通过构造 payload 使 `*v4` 成为了指定值 `85`。最终，他成功实现了写入 shellcode 并拿到了 shell。

总的来说，nova 通过详细分析和利用格式化字符串漏洞，成功解决了这道 Pwn 题目，并在博客中分享了他的解决过程和关键步骤。