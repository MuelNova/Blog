Nova 在这篇博客中详细记录了他跟随 "Linux Kernel Lab" 学习 Linux 内核的旅程，涉及内核模块、基础设施搭建、错误调试、内核API、字符设备驱动程序以及I/O访问与中断处理等多个方面。以下是关键点摘要：

### 基础设施与环境搭建
- Nova 使用 WSL2 内的 Docker 作为实验环境，便于构建和测试内核模块。
- 遇到了 WSL2 的 console 问题，通过调整网络配置解决。

### 内核模块基础
- 探索了内核模块的基本概念，如模块初始化(`module_init`)、模块退出(`module_exit`)以及内核打印(`printk`)。
- 编写了简单的内核模块，并通过`insmod`、`rmmod`命令加载和卸载模块，使用`dmesg`查看内核消息。

### 进程信息展示
- 实现了显示当前进程ID(PID)和可执行文件名的内核模块。
- 学习了如何遍历进程列表和访问`task_struct`结构体。

### 内存管理
- 探讨了内核内存分配，使用`kmalloc`分配内存，并在模块加载和卸载时正确管理内存生命周期。
- 实现了动态内存分配、初始化及释放，包括使用`struct task_info`结构体存储进程信息。

### 内核列表操作
- 学习了内核链表操作，包括使用`struct list_head`、`INIT_LIST_HEAD`、`list_add`等函数操作链表。
- 实现了内核列表的添加、遍历和删除操作，以及同步访问列表的锁机制。

### 字符设备驱动
- 深入理解字符设备驱动程序的注册、打开/关闭、读/写操作和ioctl接口。
- 实现了一个简单的字符设备驱动，能够读取预设消息、写入消息到内核缓冲区，并通过ioctl操作修改消息。
- 学习了中断处理，特别是在共享中断线上的中断处理和I/O端口的请求。

### 总结
通过一系列实践，Nova不仅掌握了内核模块的基础开发，还深入理解了内核的内存管理、进程信息处理、列表操作以及字符设备驱动的编写和中断处理机制。每一步都伴随着详细的代码示例和遇到问题的解决过程，展现了学习内核开发的全过程，包括理论知识的应用、调试技巧和实际编码经验。